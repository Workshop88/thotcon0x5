


#include "U8glib.h"
 




///////////// glyphs ////////////////

const uint8_t H [] U8G_PROGMEM = {

0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE,

0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,

0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F,

0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x0F,

0xF8, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x0F, 0xF8, 0x7F, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x0F,

0xF8, 0xFF, 0x80, 0x00, 0x00, 0x00, 0xFF, 0x0F, 0xF8, 0xFF, 0x80, 0x00, 0x00, 0x00, 0xFF, 0x8F,

0xF9, 0xFF, 0x80, 0x00, 0x00, 0x00, 0xFF, 0x8F, 0xF9, 0xFF, 0x80, 0x00, 0x00, 0x00, 0xFF, 0x8F,

0xF9, 0xFF, 0x80, 0x00, 0x00, 0x00, 0xFF, 0x8F, 0xF8, 0xFF, 0x80, 0x00, 0x00, 0x00, 0xFF, 0x8F,

0xF8, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x8F, 0xF8, 0x7F, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x8F,

0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x8F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x8F,

0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x8F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x8F,

0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x8F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x8F,

0xF8, 0x18, 0x00, 0x0F, 0xFC, 0x00, 0xFF, 0x8F, 0xF8, 0x7E, 0x00, 0x3F, 0xFF, 0x00, 0xFF, 0x8F,

0xF8, 0xFF, 0x00, 0x7F, 0xFF, 0x80, 0xFF, 0x8F, 0xF9, 0xFF, 0x80, 0x7F, 0xFF, 0x80, 0xFF, 0x8F,

0xF9, 0xFF, 0x80, 0x7F, 0xFF, 0x80, 0xFF, 0x8F, 0xF9, 0xFF, 0x80, 0x7F, 0xFF, 0xC0, 0xFF, 0x8F,

0xF9, 0xFF, 0x80, 0x7F, 0xFF, 0x80, 0xFF, 0x8F, 0xF9, 0xFF, 0x80, 0x7F, 0xFF, 0x80, 0xFF, 0x8F,

0xF8, 0xFF, 0x00, 0x3F, 0xFF, 0x80, 0xFF, 0x8F, 0xF8, 0x7E, 0x00, 0x3F, 0xFF, 0x00, 0xFF, 0x8F,

0xF8, 0x00, 0x00, 0x07, 0xF8, 0x00, 0xFF, 0x8F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x8F,

0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x8F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x8F,

0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x8F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x8F,

0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x8F, 0xF8, 0x7E, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x8F,

0xF8, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x8F, 0xF9, 0xFF, 0x80, 0x00, 0x00, 0x00, 0xFF, 0x8F,

0xF9, 0xFF, 0x80, 0x00, 0x00, 0x00, 0xFF, 0x8F, 0xF9, 0xFF, 0x80, 0x00, 0x00, 0x00, 0xFF, 0x8F,

0xF9, 0xFF, 0x80, 0x00, 0x00, 0x00, 0xFF, 0x8F, 0xF9, 0xFF, 0x80, 0x00, 0x00, 0x00, 0xFF, 0x8F,

0xF9, 0xFF, 0x80, 0x00, 0x00, 0x00, 0xFF, 0x8F, 0xF9, 0xFF, 0x80, 0x00, 0x00, 0x00, 0xFF, 0x8F,

0xF9, 0xFF, 0x80, 0x00, 0x00, 0x00, 0xFF, 0x8F, 0xF9, 0xFF, 0x80, 0x00, 0x00, 0x00, 0xFF, 0x8F,

0xF9, 0xFF, 0x80, 0x00, 0x00, 0x00, 0xFF, 0x0F, 0xF9, 0xFF, 0x80, 0x00, 0x00, 0x00, 0xFF, 0x0F,

0xF9, 0xFF, 0x80, 0x00, 0x00, 0x00, 0xFF, 0x0F, 0xF8, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x0F,

0xF8, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x0F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F,

0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F,

0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,

0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE

};

const uint8_t Xx [] U8G_PROGMEM = {

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC,

0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE,

0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E,

0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E,

0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x70, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x0E,

0x70, 0x03, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x70, 0x07, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x0E,

0x70, 0x0F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x70, 0x1F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x0E,

0x70, 0x3F, 0xFC, 0x00, 0x00, 0x07, 0x80, 0x0E, 0x70, 0x3F, 0xFC, 0x00, 0x00, 0x0F, 0xC0, 0x0E,

0x70, 0x7F, 0xF8, 0x00, 0x00, 0x1F, 0xC0, 0x0E, 0x70, 0x7F, 0xF0, 0x00, 0x00, 0x3F, 0xC0, 0x0E,

0x70, 0x7F, 0xE0, 0x00, 0x00, 0x7F, 0xC0, 0x0E, 0x70, 0x7F, 0xC0, 0x00, 0x00, 0xFF, 0x80, 0x0E,

0x70, 0x3F, 0x83, 0xC0, 0x01, 0xFF, 0x00, 0x0E, 0x70, 0x1F, 0x07, 0xE0, 0x03, 0xFE, 0x00, 0x0E,

0x70, 0x00, 0x0F, 0xF0, 0x07, 0xFC, 0x00, 0x0E, 0x70, 0x00, 0x0F, 0xF0, 0x0F, 0xF8, 0x00, 0x0E,

0x70, 0x00, 0x0F, 0xF0, 0x1F, 0xF0, 0x00, 0x0E, 0x70, 0x00, 0x0F, 0xF0, 0x3F, 0xE0, 0x00, 0x0E,

0x70, 0x00, 0x07, 0xE0, 0x7F, 0xC0, 0x00, 0x0E, 0x70, 0x00, 0x03, 0xC0, 0xFF, 0x80, 0x00, 0x0E,

0x70, 0x00, 0x00, 0x01, 0xFF, 0x00, 0x00, 0x0E, 0x70, 0x00, 0x00, 0x03, 0xFE, 0x00, 0x00, 0x0E,

0x70, 0x00, 0x00, 0x07, 0xFC, 0x00, 0x00, 0x0E, 0x70, 0x00, 0x00, 0x0F, 0xF8, 0x00, 0x00, 0x0E,

0x70, 0x00, 0x00, 0x1F, 0xF8, 0x00, 0x00, 0x0E, 0x70, 0x00, 0x00, 0x3F, 0xF0, 0x00, 0x00, 0x0E,

0x70, 0x00, 0x00, 0x7F, 0xE0, 0x00, 0x00, 0x0E, 0x70, 0x00, 0x00, 0xFF, 0xC0, 0x00, 0x00, 0x0E,

0x70, 0x00, 0x01, 0xFF, 0x81, 0xC0, 0x00, 0x0E, 0x70, 0x00, 0x03, 0xFF, 0x07, 0xE0, 0x00, 0x0E,

0x70, 0x00, 0x07, 0xFE, 0x0F, 0xF0, 0x00, 0x0E, 0x70, 0x00, 0x0F, 0xFC, 0x0F, 0xF0, 0x00, 0x0E,

0x70, 0x00, 0x1F, 0xF8, 0x0F, 0xF0, 0x00, 0x0E, 0x70, 0x00, 0x3F, 0xF0, 0x0F, 0xF0, 0x00, 0x0E,

0x70, 0x00, 0x7F, 0xE0, 0x07, 0xF0, 0x78, 0x0E, 0x70, 0x00, 0xFF, 0xC0, 0x07, 0xE0, 0xFC, 0x0E,

0x70, 0x01, 0xFF, 0x80, 0x01, 0x81, 0xFE, 0x0E, 0x70, 0x03, 0xFF, 0x00, 0x00, 0x03, 0xFE, 0x0E,

0x70, 0x03, 0xFE, 0x00, 0x00, 0x07, 0xFE, 0x0E, 0x70, 0x03, 0xF8, 0x00, 0x00, 0x0F, 0xFE, 0x0E,

0x70, 0x03, 0xF0, 0x00, 0x00, 0x1F, 0xFE, 0x0E, 0x70, 0x03, 0xE0, 0x00, 0x00, 0x3F, 0xFC, 0x0E,

0x70, 0x00, 0xC0, 0x00, 0x00, 0x3F, 0xF8, 0x0E, 0x70, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xF0, 0x0E,

0x70, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xE0, 0x0E, 0x70, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xC0, 0x0E,

0x70, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x80, 0x0E, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E,

0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E,

0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E,

0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE,

0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

};

const uint8_t O[] U8G_PROGMEM = {

0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00,

0x00, 0x00, 0x07, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFC, 0x00, 0x00,

0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xF0, 0x0F, 0xFF, 0x80, 0x00,

0x00, 0x07, 0xFF, 0xE0, 0x07, 0xFF, 0xE0, 0x00, 0x00, 0x0F, 0xFF, 0xE0, 0x07, 0xFF, 0xF0, 0x00,

0x00, 0x1F, 0xFF, 0xE0, 0x07, 0xFF, 0xF8, 0x00, 0x00, 0x3F, 0xFF, 0xE0, 0x07, 0xFF, 0xFC, 0x00,

0x00, 0x7F, 0xFF, 0xE0, 0x07, 0xFF, 0xFE, 0x00, 0x00, 0xFF, 0xFF, 0xF0, 0x0F, 0xFF, 0xFF, 0x00,

0x01, 0xFF, 0xFF, 0xF0, 0x0F, 0xFF, 0xFF, 0x80, 0x03, 0xFF, 0xFF, 0xF0, 0x0F, 0xFF, 0xFF, 0xC0,

0x03, 0xFF, 0xFF, 0xF0, 0x0F, 0xFF, 0xFF, 0xC0, 0x07, 0xE3, 0xFF, 0xF0, 0x0F, 0xFF, 0xC7, 0xE0,

0x0F, 0xE1, 0xFF, 0xF8, 0x1F, 0xFF, 0x87, 0xF0, 0x0F, 0xC0, 0xFF, 0xF8, 0x1F, 0xFF, 0x03, 0xF0,

0x1F, 0x80, 0x7F, 0xF8, 0x1F, 0xFE, 0x01, 0xF8, 0x1F, 0x80, 0x3F, 0xE0, 0x07, 0xFC, 0x01, 0xF8,

0x1F, 0x00, 0x1F, 0x80, 0x01, 0xF8, 0x00, 0xF8, 0x3F, 0x00, 0x0F, 0x01, 0x00, 0xF0, 0x00, 0xFC,

0x3E, 0x00, 0x02, 0x03, 0x80, 0x40, 0x00, 0x7C, 0x3E, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x7C,

0x7F, 0x80, 0x00, 0x01, 0x80, 0x00, 0x01, 0xFE, 0x7F, 0xF0, 0x00, 0x0D, 0xE0, 0x00, 0x0F, 0xFE,

0x7F, 0xFE, 0x02, 0x07, 0xC0, 0x80, 0x7F, 0xFE, 0x7F, 0xFF, 0xC2, 0x03, 0x80, 0x03, 0xFF, 0xFE,

0x7F, 0xFF, 0xE6, 0x03, 0x80, 0x47, 0xFF, 0xFE, 0x7F, 0xFF, 0xE6, 0x03, 0x80, 0x47, 0xFF, 0xFE,

0x7F, 0xFF, 0xE6, 0x01, 0x80, 0xC7, 0xFF, 0xFE, 0xFF, 0xFF, 0xE6, 0x03, 0x80, 0xE7, 0xFF, 0xFF,

0xFF, 0xFF, 0xE7, 0x03, 0x80, 0xE7, 0xFF, 0xFF, 0x7F, 0xFF, 0xE7, 0x83, 0xC1, 0xE7, 0xFF, 0xFE,

0x7F, 0xFF, 0xE7, 0xC7, 0xE7, 0xC7, 0xFF, 0xFE, 0x7F, 0xFF, 0xE7, 0xFF, 0xFF, 0xC7, 0xFF, 0xFE,

0x7F, 0xFF, 0xC3, 0xFF, 0xFF, 0xC3, 0xFF, 0xFE, 0x7F, 0xFE, 0x03, 0xFF, 0xFF, 0x80, 0xFF, 0xFE,

0x7F, 0xF8, 0x01, 0xFF, 0xFF, 0x80, 0x1F, 0xFE, 0x7F, 0xC0, 0x01, 0xFF, 0xFF, 0x00, 0x03, 0xFE,

0x3E, 0x00, 0x00, 0xFF, 0xFE, 0x00, 0x00, 0x7C, 0x3E, 0x00, 0x00, 0x3F, 0xFC, 0x40, 0x00, 0x7C,

0x3F, 0x00, 0x0F, 0x0F, 0xF0, 0xE0, 0x00, 0xFC, 0x1F, 0x00, 0x1F, 0x80, 0x01, 0xF8, 0x00, 0xF8,

0x1F, 0x80, 0x3F, 0xE0, 0x07, 0xFC, 0x01, 0xF8, 0x1F, 0x80, 0x7F, 0xF8, 0x1F, 0xFE, 0x01, 0xF8,

0x0F, 0xC0, 0xFF, 0xF8, 0x1F, 0xFF, 0x03, 0xF0, 0x0F, 0xE1, 0xFF, 0xF8, 0x1F, 0xFF, 0x87, 0xF0,

0x07, 0xE3, 0xFF, 0xF0, 0x0F, 0xFF, 0xC7, 0xE0, 0x03, 0xFF, 0xFF, 0xF0, 0x0F, 0xFF, 0xEF, 0xC0,

0x03, 0xFF, 0xFF, 0xF0, 0x0F, 0xFF, 0xFF, 0xC0, 0x01, 0xFF, 0xFF, 0xF0, 0x0F, 0xFF, 0xFF, 0x80,

0x00, 0xFF, 0xFF, 0xF0, 0x0F, 0xFF, 0xFF, 0x00, 0x00, 0x7F, 0xFF, 0xE0, 0x07, 0xFF, 0xFE, 0x00,

0x00, 0x3F, 0xFF, 0xE0, 0x07, 0xFF, 0xFC, 0x00, 0x00, 0x1F, 0xFF, 0xE0, 0x07, 0xFF, 0xF8, 0x00,

0x00, 0x0F, 0xFF, 0xE0, 0x07, 0xFF, 0xF0, 0x00, 0x00, 0x07, 0xFF, 0xE0, 0x07, 0xFF, 0xE0, 0x00,

0x00, 0x01, 0xFF, 0xF0, 0x0F, 0xFF, 0x80, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,

0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xE0, 0x00, 0x00,

0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00

};

const uint8_t R[] U8G_PROGMEM = {

0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE,

0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE,

0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E,

0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x60, 0x18, 0x00, 0xFF, 0xF0, 0x00, 0x00, 0x1E,

0x60, 0x7C, 0x01, 0xFF, 0xF8, 0x00, 0x00, 0x1E, 0x60, 0x7E, 0x03, 0xFF, 0xF8, 0x00, 0x00, 0x1E,

0x60, 0xFE, 0x03, 0xFF, 0xFC, 0x00, 0x00, 0x1E, 0x60, 0xFE, 0x03, 0xFF, 0xFC, 0x00, 0x00, 0x1E,

0x60, 0xFE, 0x03, 0xFF, 0xFC, 0x00, 0x00, 0x1E, 0x60, 0xFE, 0x03, 0xFF, 0xF8, 0x00, 0x00, 0x1E,

0x60, 0xFE, 0x01, 0xFF, 0xF8, 0x00, 0x00, 0x1E, 0x60, 0xFE, 0x00, 0xFF, 0xF0, 0x00, 0x00, 0x1E,

0x60, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x60, 0xFE, 0x00, 0x00, 0x00, 0x08, 0x00, 0x1E,

0x60, 0xFE, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x1E, 0x60, 0xFE, 0x00, 0x00, 0x00, 0x7F, 0x00, 0x1E,

0x60, 0xFE, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x1E, 0x60, 0xFE, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x1E,

0x60, 0xFE, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x1E, 0x60, 0xFE, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x1E,

0x60, 0xFE, 0x00, 0x00, 0x00, 0x7F, 0x00, 0x1E, 0x60, 0xFE, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x1E,

0x60, 0xFE, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x1E, 0x60, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E,

0x60, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x60, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E,

0x60, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x60, 0xFE, 0x00, 0x00, 0x78, 0x00, 0x00, 0x1E,

0x60, 0xFE, 0x00, 0x01, 0xFC, 0x00, 0x00, 0x1E, 0x60, 0xFE, 0x00, 0x03, 0xFE, 0x00, 0x00, 0x1E,

0x60, 0xFE, 0x00, 0x03, 0xFF, 0x00, 0x00, 0x1E, 0x60, 0xFE, 0x00, 0x03, 0xFF, 0x80, 0x00, 0x1E,

0x60, 0xFE, 0x00, 0x03, 0xFF, 0xC0, 0x00, 0x1E, 0x60, 0xFE, 0x00, 0x03, 0xFF, 0xE0, 0x00, 0x1E,

0x60, 0xFE, 0x00, 0x01, 0xFF, 0xE0, 0x00, 0x1E, 0x60, 0xFE, 0x00, 0x00, 0xFF, 0xF0, 0x00, 0x1E,

0x60, 0xFE, 0x00, 0x00, 0x7F, 0xF0, 0x00, 0x1E, 0x60, 0xFE, 0x00, 0x00, 0x7F, 0xF0, 0x00, 0x1E,

0x60, 0xFE, 0x00, 0x00, 0x3F, 0xE0, 0x00, 0x1E, 0x60, 0xFE, 0x00, 0x00, 0x1F, 0xE0, 0x00, 0x1E,

0x60, 0xFE, 0x00, 0x00, 0x0F, 0xC0, 0x00, 0x1E, 0x60, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E,

0x60, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x60, 0xFE, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x1E,

0x60, 0xFE, 0x00, 0x00, 0x00, 0x01, 0xFC, 0x1E, 0x60, 0xFE, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x1E,

0x60, 0xFE, 0x00, 0x00, 0x00, 0x03, 0xFE, 0x1E, 0x60, 0xFE, 0x00, 0x00, 0x00, 0x03, 0xFE, 0x1E,

0x60, 0xFE, 0x00, 0x00, 0x00, 0x03, 0xFE, 0x1E, 0x60, 0xFE, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x1E,

0x60, 0xFE, 0x00, 0x00, 0x00, 0x01, 0xFC, 0x1E, 0x60, 0x7E, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x1E,

0x60, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E,

0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E,

0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE,

0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8

};

const uint8_t V[] U8G_PROGMEM = {

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,

0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,

0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00,

0x00, 0x70, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x38, 0x07, 0xFC, 0x18, 0x00, 0x00, 0x00,

0x00, 0x1C, 0x7F, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0x0F, 0xF8, 0x00, 0x00, 0x00,

0x00, 0x0F, 0xF8, 0x01, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x80, 0x00, 0xFC, 0x00, 0x00, 0x00,

0x00, 0x1F, 0x80, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0xFF, 0x80, 0x00, 0x00,

0x00, 0x7B, 0x80, 0x00, 0xE7, 0x80, 0x00, 0x00, 0x00, 0x73, 0x80, 0x01, 0xC3, 0xC0, 0x00, 0x00,

0x00, 0xE1, 0xC0, 0x01, 0xC1, 0xE0, 0x00, 0x00, 0x00, 0xC1, 0xC0, 0x01, 0x81, 0xE0, 0x00, 0x00,

0x01, 0xC0, 0xC0, 0x03, 0x80, 0xF0, 0x00, 0x00, 0x01, 0x80, 0xE0, 0x03, 0x80, 0x70, 0x00, 0x00,

0x03, 0x80, 0xE0, 0x03, 0x00, 0x78, 0x00, 0x00, 0x03, 0x00, 0x60, 0x07, 0x00, 0x78, 0x00, 0x00,

0x07, 0x00, 0x60, 0x06, 0x00, 0x3C, 0x00, 0x00, 0x07, 0x00, 0x70, 0x06, 0x00, 0x3C, 0x00, 0x00,

0x07, 0x00, 0x30, 0x0E, 0x00, 0x3C, 0x00, 0x00, 0x07, 0x00, 0x30, 0x0C, 0x00, 0x3E, 0x00, 0x00,

0x07, 0x00, 0x30, 0x1C, 0x00, 0x3E, 0x00, 0x00, 0x07, 0x00, 0x18, 0x1C, 0x00, 0x3E, 0x00, 0x00,

0x07, 0x00, 0x18, 0x18, 0x00, 0x1E, 0x00, 0x00, 0x07, 0x00, 0x18, 0x18, 0x00, 0x3E, 0x00, 0x00,

0x07, 0x80, 0x18, 0x38, 0x00, 0x3E, 0x00, 0x00, 0x03, 0x80, 0x0C, 0x38, 0x00, 0x3C, 0x00, 0x00,

0x03, 0xC0, 0x0C, 0x30, 0x00, 0x3C, 0x00, 0x00, 0x03, 0xC0, 0x0C, 0x30, 0x00, 0x7C, 0x00, 0x00,

0x01, 0xE0, 0x0C, 0x70, 0x00, 0x78, 0x00, 0x00, 0x01, 0xF0, 0x0E, 0x70, 0x00, 0xF8, 0x00, 0x00,

0x00, 0xF0, 0x06, 0x60, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x78, 0x06, 0xE0, 0x01, 0xE0, 0x00, 0x00,

0x00, 0x3C, 0x06, 0xE0, 0x03, 0xE0, 0x00, 0x00, 0x00, 0x3E, 0x07, 0xE0, 0x07, 0xC0, 0x00, 0x00,

0x00, 0x1F, 0x07, 0xC0, 0x0F, 0x80, 0x00, 0x00, 0x00, 0x1F, 0xC7, 0xC0, 0x1F, 0x80, 0x00, 0x00,

0x00, 0x03, 0xE7, 0xC0, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xE3, 0xFF, 0x00, 0x00, 0x00,

0x00, 0x00, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xF8, 0x00, 0x00, 0x00,

0x00, 0x00, 0x3F, 0xFF, 0xC8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0x00, 0x00, 0x00, 0x00,

0x00, 0x00, 0x07, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0xC0, 0x00, 0x00, 0x00, 0x00,

0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,

0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00,

0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

};

const uint8_t qr[] U8G_PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xF9, 0xFE, 0x66, 0x1F, 0xFF, 0x80,

0x01, 0xFF, 0xF9, 0xFE, 0x66, 0x1F, 0xFF, 0x80, 0x01, 0x80, 0x18, 0x07, 0x98, 0x18, 0x01, 0x80,

0x01, 0x80, 0x18, 0x07, 0x98, 0x18, 0x01, 0x80, 0x01, 0x9F, 0x98, 0x66, 0x7F, 0x99, 0xF9, 0x80,

0x01, 0x9F, 0x98, 0x66, 0x7F, 0x99, 0xF9, 0x80, 0x01, 0x9F, 0x98, 0x1E, 0x06, 0x19, 0xF9, 0x80,

0x01, 0x9F, 0x98, 0x1E, 0x06, 0x19, 0xF9, 0x80, 0x01, 0x9F, 0x98, 0x1F, 0x9F, 0x99, 0xF9, 0x80,

0x01, 0x9F, 0x98, 0x1F, 0x9F, 0x99, 0xF9, 0x80, 0x01, 0x80, 0x18, 0x66, 0x79, 0x98, 0x01, 0x80,

0x01, 0x80, 0x18, 0x66, 0x79, 0x98, 0x01, 0x80, 0x01, 0xFF, 0xF9, 0x99, 0x99, 0x9F, 0xFF, 0x80,

0x01, 0xFF, 0xF9, 0x99, 0x99, 0x9F, 0xFF, 0x80, 0x00, 0x00, 0x01, 0xE1, 0xFF, 0x80, 0x00, 0x00,

0x00, 0x00, 0x01, 0xE1, 0xFF, 0x80, 0x00, 0x00, 0x01, 0xE7, 0x98, 0x61, 0x9F, 0x98, 0x01, 0x80,

0x01, 0xE7, 0x98, 0x61, 0x9F, 0x98, 0x01, 0x80, 0x01, 0x9E, 0x06, 0x18, 0x00, 0x01, 0xFE, 0x00,

0x01, 0x9E, 0x06, 0x18, 0x00, 0x01, 0xFE, 0x00, 0x01, 0x99, 0xFE, 0x61, 0xFF, 0x86, 0x61, 0x80,

0x01, 0x99, 0xFE, 0x61, 0xFF, 0x86, 0x61, 0x80, 0x01, 0xFE, 0x61, 0x80, 0x18, 0x60, 0x7F, 0x80,

0x01, 0xFE, 0x61, 0x80, 0x18, 0x60, 0x7F, 0x80, 0x00, 0x61, 0xF9, 0xF8, 0x7E, 0x1E, 0x01, 0x80,

0x00, 0x61, 0xF9, 0xF8, 0x7E, 0x1E, 0x01, 0x80, 0x01, 0x86, 0x07, 0xF9, 0x99, 0xE1, 0x86, 0x00,

0x01, 0x86, 0x07, 0xF9, 0x99, 0xE1, 0x86, 0x00, 0x01, 0xE1, 0xF9, 0xF8, 0x1E, 0x06, 0x7F, 0x80,

0x01, 0xE1, 0xF9, 0xF8, 0x1E, 0x06, 0x7F, 0x80, 0x01, 0x87, 0x80, 0x01, 0xFE, 0x1F, 0x99, 0x80,

0x01, 0x87, 0x80, 0x01, 0xFE, 0x1F, 0x99, 0x80, 0x01, 0x9F, 0x9F, 0xE7, 0x87, 0xFF, 0x9E, 0x00,

0x01, 0x9F, 0x9F, 0xE7, 0x87, 0xFF, 0x9E, 0x00, 0x00, 0x00, 0x01, 0x9E, 0x07, 0x81, 0x86, 0x00,

0x00, 0x00, 0x01, 0x9E, 0x07, 0x81, 0x86, 0x00, 0x01, 0xFF, 0xF8, 0x19, 0xFF, 0x99, 0xE1, 0x80,

0x01, 0xFF, 0xF8, 0x19, 0xFF, 0x99, 0xE1, 0x80, 0x01, 0x80, 0x18, 0x7E, 0x67, 0x81, 0x81, 0x80,

0x01, 0x80, 0x18, 0x7E, 0x67, 0x81, 0x81, 0x80, 0x01, 0x9F, 0x99, 0xE6, 0x67, 0xFF, 0xE7, 0x80,

0x01, 0x9F, 0x99, 0xE6, 0x67, 0xFF, 0xE7, 0x80, 0x01, 0x9F, 0x99, 0x99, 0xE0, 0x1E, 0x67, 0x80,

0x01, 0x9F, 0x99, 0x99, 0xE0, 0x1E, 0x67, 0x80, 0x01, 0x9F, 0x98, 0x7E, 0x61, 0xE7, 0x9F, 0x80,

0x01, 0x9F, 0x98, 0x7E, 0x61, 0xE7, 0x9F, 0x80, 0x01, 0x80, 0x19, 0x87, 0xE0, 0x07, 0x9F, 0x80,

0x01, 0x80, 0x19, 0x87, 0xE0, 0x07, 0x9F, 0x80, 0x01, 0xFF, 0xF9, 0xFF, 0xE1, 0x80, 0x61, 0x80,

0x01, 0xFF, 0xF9, 0xFF, 0xE1, 0x80, 0x61, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

};


const uint8_t link[] U8G_PROGMEM = {

0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

0x00, 0x30, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,

0x00, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,

0x00, 0xC0, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,

0x00, 0x80, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,

0x03, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,

0x02, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,

0x0C, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,

0x08, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,

0xF0, 0x40, 0x20, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x90, 0xC0, 0x30, 0x90, 0x00, 0x00, 0x00, 0x00,

0x8D, 0x3F, 0xCB, 0x10, 0x00, 0x00, 0x00, 0x00, 0x87, 0x3F, 0xCC, 0x10, 0x00, 0x00, 0x00, 0x00,

0xFA, 0xFF, 0xF7, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x9E, 0xFF, 0xF7, 0x90, 0x00, 0x00, 0x00, 0x00,

0x93, 0x00, 0x0C, 0x90, 0x00, 0x00, 0x00, 0x00, 0x93, 0x00, 0x0C, 0x90, 0x00, 0x00, 0x00, 0x00,

0x90, 0x30, 0xC0, 0x90, 0x00, 0x00, 0x00, 0x00, 0x90, 0x30, 0xC0, 0x90, 0x00, 0x00, 0x00, 0x00,

0x4C, 0x00, 0x03, 0x20, 0x00, 0x00, 0x00, 0x00, 0x44, 0x00, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00,

0x43, 0x0F, 0x0C, 0x20, 0x00, 0x00, 0x00, 0x00, 0x41, 0x0F, 0x08, 0x20, 0x00, 0x00, 0x00, 0x00,

0x41, 0xCF, 0x38, 0x20, 0x00, 0x00, 0x00, 0x00, 0x41, 0x40, 0x28, 0x20, 0x00, 0x00, 0x00, 0x00,

0x32, 0x3F, 0xC4, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00,

0x12, 0x00, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00,

0x10, 0x3F, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x10, 0x3F, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00,

0x1F, 0xF0, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xF0, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00,

0x10, 0x3F, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x10, 0x3F, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00,

0x10, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00,

0x0F, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xF0, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00,

0x03, 0xF0, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xF0, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00,

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

};
















////////////////

#define KEY_NONE 0
#define KEY_PREV 1
#define KEY_NEXT 2
#define KEY_SELECT 3
#define KEY_BACK 4

/* / teensy 
U8GLIB_DOGS102 u8g(4,0);


uint8_t uiKeyPrev = 17;
uint8_t uiKeyNext = 18;
uint8_t uiKeySelect = 15;
uint8_t uiKeyBack = 14;

*/

U8GLIB_DOGS102 u8g(17,11); //PROTO BOARD

uint8_t uiKeyPrev = 4;
uint8_t uiKeyNext = 0;
uint8_t uiKeySelect = 12;
uint8_t uiKeyBack = 6;
uint8_t uiKeyRight = 1;
uint8_t uiKeyLeft = 30;
//*/

uint8_t uiKeyCodeFirst = KEY_NONE;
uint8_t uiKeyCodeSecond = KEY_NONE;
uint8_t uiKeyCode = KEY_NONE;

//////////

////// Console mode globals and functions.

#define LINE_MAX 30 
uint8_t line_buf[LINE_MAX] = "THOTCON Console";
uint8_t line_pos = 0;
#define ROW_MAX 12
#define MESG_LINES 5
uint8_t con_screen[ROW_MAX][LINE_MAX];
uint8_t con_rows ,con_cols;
char *welcome_strings[MESG_LINES] = { "**Begin THOTCON Transmition**", "Welcome", "to", "THOTCON 0x5" , "** End Transmition **" };

void clear_screen(void) {
  uint8_t i, j;
  for( i = 0; i < ROW_MAX; i++ )
    for( j = 0; j < LINE_MAX; j++ )
      con_screen[i][j] = 0;  
}
void add_line_to_screen(void) {
  uint8_t i, j;
  for( j = 0; j < LINE_MAX; j++ )
    for( i = 0; i < con_rows-1; i++ )
      con_screen[i][j] = con_screen[i+1][j];
  
  for( j = 0; j < LINE_MAX; j++ )
    con_screen[con_rows-1][j] = line_buf[j];
}

void scroll_draw(void) {
  uint8_t i, y;
  u8g.setFont(u8g_font_5x7);
  u8g.setFontPosTop();
  
  // calculate the number of rows for the display
  con_rows = u8g.getHeight() / u8g.getFontLineSpacing();
  if ( con_rows > ROW_MAX )
    con_rows = ROW_MAX; 
  
  // estimate the number of columns for the display
  con_cols = u8g.getWidth() / u8g.getStrWidth("m");
  if ( con_cols > LINE_MAX-1 )
    con_cols = LINE_MAX-1; 
  // graphic commands to redraw the complete screen are placed here    
  y = 0;       // reference is the top left -1 position of the string
  y--;           // correct the -1 position of the drawStr 
  for( i = 0; i < con_rows; i++ )
  {
    u8g.drawStr( 0, y, welcome_strings[i]);
    y += u8g.getFontLineSpacing();
  }
}




////// menu ui

void uiSetup(void) {
  // configure input keys 
  
  pinMode(uiKeyPrev, INPUT);           // set pin to input
  digitalWrite(uiKeyPrev, HIGH);       // turn on pullup resistors
  pinMode(uiKeyNext, INPUT);           // set pin to input
  digitalWrite(uiKeyNext, HIGH);       // turn on pullup resistors
  pinMode(uiKeySelect, INPUT);           // set pin to input
  digitalWrite(uiKeySelect, HIGH);       // turn on pullup resistors
  pinMode(uiKeyBack, INPUT);           // set pin to input
  digitalWrite(uiKeyBack, HIGH);       // turn on pullup resistors
  pinMode(uiKeyRight, INPUT);
  digitalWrite(uiKeyRight, HIGH);
   pinMode(uiKeyLeft, INPUT);
  digitalWrite(uiKeyLeft, HIGH);
}

void uiStep(void) {
  uiKeyCodeSecond = uiKeyCodeFirst;
  if ( digitalRead(uiKeyPrev) == LOW )
  {
    uiKeyCodeFirst = KEY_PREV;
    Keyboard.write(KEY_UP_ARROW);
    Serial.write("UP");
  }
  else if ( digitalRead(uiKeyNext) == LOW )
    uiKeyCodeFirst = KEY_NEXT;
  else if ( digitalRead(uiKeySelect) == LOW )
    uiKeyCodeFirst = KEY_SELECT;
  else if ( digitalRead(uiKeyBack) == LOW )
    uiKeyCodeFirst = KEY_BACK;
  else if ( digitalRead(uiKeyRight) == LOW )
  {
    Keyboard.write(KEY_RIGHT_ARROW);
    Serial.write("RIGHT");
    uiKeyCodeFirst = KEY_NONE; 
  }
  else if ( digitalRead(uiKeyLeft) == LOW ){
    Keyboard.write(KEY_LEFT_ARROW);
    Serial.write("LEFT");
    uiKeyCodeFirst = KEY_NONE;
  }  
  else 
    uiKeyCodeFirst = KEY_NONE;
  
  if ( uiKeyCodeSecond == uiKeyCodeFirst )
    uiKeyCode = uiKeyCodeFirst;
  else
    uiKeyCode = KEY_NONE;
}


#define MENU_ITEMS 5
#define TALKS 5
char *menu_strings[MENU_ITEMS] = { "breaker", "program", "synch", "jack-in" , "options" };

char *speaker_strings[TALKS] = {"Thieme - UFOs and Government",
                                "Mortman - It Ain't Rocket Science",
                                "Erven - Just What The Doctor Ordered?", 
                                "Dobbe - The Perfectly Legitimate Project",
                                "Mayer - Introducing idb"};

uint8_t menu_current = 0;
uint8_t menu_redraw_required = 0;
uint8_t last_key_code = KEY_NONE;

void badgeRole(uint8_t menu_item)
{
  switch (menu_item){
    case 0: {// breaker
        const uint8_t *images[7] = { H , Xx , O , R, V, qr, link };
        uint8_t i =0; 
        for (i=0; i<7; i++)
        { 
           u8g.firstPage();
        do{
           u8g.drawBitmapP(19, 0, 8, 64, images[i]);
           } while( u8g.nextPage() );
         delay(2000);
        }
    }
     break;
    case 1:{ // talks
      u8g.firstPage();
       do  {
          drawTalks();
        } while( u8g.nextPage() );
        delay(2000);
    }
        break;
  };  // switch
  return;
}

void drawMenu(void) {
  uint8_t i, h;
  u8g_uint_t w, d;

  u8g.setFont(u8g_font_6x13);
  u8g.setFontRefHeightText();
  u8g.setFontPosTop();
  
  h = u8g.getFontAscent()-u8g.getFontDescent();
  w = u8g.getWidth();
  for( i = 0; i < MENU_ITEMS; i++ ) {
    d = (w-u8g.getStrWidth(menu_strings[i]))/2;
    u8g.setDefaultForegroundColor();
    if ( i == menu_current ) {
      u8g.drawBox(0, i*h+1, w, h);
      u8g.setDefaultBackgroundColor();
    }
    u8g.drawStr(d, i*h, menu_strings[i]);
  }
}

void drawTalks(void) {
  uint8_t i, h;
  u8g_uint_t w, d;

  u8g.setFont(u8g_font_4x6);
  u8g.setFontRefHeightText();
  u8g.setFontPosTop();
  
  h = u8g.getFontAscent()-u8g.getFontDescent();
  w = u8g.getWidth();
  for( i = 0; i < TALKS; i++ ) {
    d = (w-u8g.getStrWidth(speaker_strings[i]))/2;
    u8g.setDefaultForegroundColor();
    if ( i == menu_current ) {
      u8g.drawBox(0, i*h+1, w, h);
      u8g.setDefaultBackgroundColor();
    }
    u8g.drawStr(d, i*h, speaker_strings[i]);
  }

}

void updateMenu(void) {
  if ( uiKeyCode != KEY_NONE && last_key_code == uiKeyCode ) {
    return;
  }
  last_key_code = uiKeyCode;
  
  switch ( uiKeyCode ) {
    case KEY_NEXT:
      menu_current++;
      if ( menu_current >= MENU_ITEMS )
        menu_current = 0;
      menu_redraw_required = 1;
      break;
    case KEY_PREV:
      if ( menu_current == 0 )
        menu_current = MENU_ITEMS;
      menu_current--;
      menu_redraw_required = 1;
      break;
   case KEY_SELECT:  {
       badgeRole(menu_current);   
       //menu_redraw_required = 1;
   }
       break;  
   case KEY_BACK:
      menu_redraw_required = 1;
      drawMenu();
      break;
  }
}



void setup() {
  // rotate screen, if required
  u8g.setRot180();
  
  uiSetup();                                // setup key detection and debounce algorithm
  menu_redraw_required = 1; 
 
  // establish coms
  Serial.begin(9600);
  Keyboard.begin();
 // clear_screen();
  scroll_draw();
  delay(1000);
}

void loop() {  

  uiStep();                                     // check for key press
    
  if (  menu_redraw_required != 0 ) {
    u8g.firstPage();
    do  {
      drawMenu();
    } while( u8g.nextPage() );
    menu_redraw_required = 0;
  }

  updateMenu();                            // update menu bar
  
}
